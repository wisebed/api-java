
package eu.wisebed.api.rs;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import eu.wisebed.api.common.SecretAuthenticationKey;
import eu.wisebed.api.common.SecretReservationKey;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6
 * Generated source version: 2.1
 * 
 */
@WebService(name = "RS", targetNamespace = "urn:RSService")
@XmlSeeAlso({
    eu.wisebed.api.rs.ObjectFactory.class,
    eu.wisebed.api.common.ObjectFactory.class
})
public interface RS {


    /**
     * 
     * @param to
     * @param from
     * @return
     *     returns java.util.List<eu.wisebed.api.rs.PublicReservationData>
     * @throws RSExceptionException
     */
    @WebMethod
    @WebResult(name = "reservations", targetNamespace = "")
    @RequestWrapper(localName = "getReservations", targetNamespace = "urn:RSService", className = "eu.wisebed.api.rs.GetReservations")
    @ResponseWrapper(localName = "getReservationsResponse", targetNamespace = "urn:RSService", className = "eu.wisebed.api.rs.GetReservationsResponse")
    public List<PublicReservationData> getReservations(
        @WebParam(name = "from", targetNamespace = "")
        XMLGregorianCalendar from,
        @WebParam(name = "to", targetNamespace = "")
        XMLGregorianCalendar to)
        throws RSExceptionException
    ;

    /**
     * 
     * @param secretAuthenticationKey
     * @param period
     * @return
     *     returns java.util.List<eu.wisebed.api.rs.ConfidentialReservationData>
     * @throws RSExceptionException
     */
    @WebMethod
    @WebResult(name = "reservationData", targetNamespace = "")
    @RequestWrapper(localName = "getConfidentialReservations", targetNamespace = "urn:RSService", className = "eu.wisebed.api.rs.GetConfidentialReservations")
    @ResponseWrapper(localName = "getConfidentialReservationsResponse", targetNamespace = "urn:RSService", className = "eu.wisebed.api.rs.GetConfidentialReservationsResponse")
    public List<ConfidentialReservationData> getConfidentialReservations(
        @WebParam(name = "secretAuthenticationKey", targetNamespace = "")
        List<SecretAuthenticationKey> secretAuthenticationKey,
        @WebParam(name = "period", targetNamespace = "")
        GetReservations period)
        throws RSExceptionException
    ;

    /**
     * 
     * @param secretReservationKey
     * @return
     *     returns java.util.List<eu.wisebed.api.rs.ConfidentialReservationData>
     * @throws ReservationNotFoundExceptionException
     * @throws RSExceptionException
     */
    @WebMethod
    @WebResult(name = "reservationData", targetNamespace = "")
    @RequestWrapper(localName = "getReservation", targetNamespace = "urn:RSService", className = "eu.wisebed.api.rs.GetReservation")
    @ResponseWrapper(localName = "getReservationResponse", targetNamespace = "urn:RSService", className = "eu.wisebed.api.rs.GetReservationResponse")
    public List<ConfidentialReservationData> getReservation(
        @WebParam(name = "secretReservationKey", targetNamespace = "")
        List<SecretReservationKey> secretReservationKey)
        throws RSExceptionException, ReservationNotFoundExceptionException
    ;

    /**
     * 
     * @param secretReservationKey
     * @throws ReservationNotFoundExceptionException
     * @throws RSExceptionException
     */
    @WebMethod
    @RequestWrapper(localName = "deleteReservation", targetNamespace = "urn:RSService", className = "eu.wisebed.api.rs.DeleteReservation")
    @ResponseWrapper(localName = "deleteReservationResponse", targetNamespace = "urn:RSService", className = "eu.wisebed.api.rs.DeleteReservationResponse")
    public void deleteReservation(
        @WebParam(name = "secretReservationKey", targetNamespace = "")
        List<SecretReservationKey> secretReservationKey)
        throws RSExceptionException, ReservationNotFoundExceptionException
    ;

    /**
     * 
     * @param authenticationData
     * @param reservation
     * @return
     *     returns java.util.List<eu.wisebed.api.common.SecretReservationKey>
     * @throws AuthorizationExceptionException
     * @throws RSExceptionException
     * @throws ReservationConflictExceptionException
     */
    @WebMethod
    @WebResult(name = "secretReservationKey", targetNamespace = "")
    @RequestWrapper(localName = "makeReservation", targetNamespace = "urn:RSService", className = "eu.wisebed.api.rs.MakeReservation")
    @ResponseWrapper(localName = "makeReservationResponse", targetNamespace = "urn:RSService", className = "eu.wisebed.api.rs.MakeReservationResponse")
    public List<SecretReservationKey> makeReservation(
        @WebParam(name = "authenticationData", targetNamespace = "")
        List<SecretAuthenticationKey> authenticationData,
        @WebParam(name = "reservation", targetNamespace = "")
        ConfidentialReservationData reservation)
        throws AuthorizationExceptionException, RSExceptionException, ReservationConflictExceptionException
    ;

}
